x<-rnorm(80,0,500)
x<-abs(x)
hist(x)
hist(x)
par(mfrow=c(1,3))
hist(x, breaks = 6)
hist(x, breaks = 10)
hist(x, breaks = 20)
hist(x, breaks = 15)
hist(x, breaks = 20)
hist(x, breaks = 12)
hist(x, breaks = 11)
hist(x, breaks = 10)
x<-c(rep(0,5), rep(100,5), rep(250,5))
hist(x, breaks = 10)
x<-abs(c(rep(0,5), rep(100,5), rep(250,5), rnorm(80,0,500)))
hist(x, breaks = 10)
hist(x, breaks = 20)
hist(x, breaks = 5)
hist(x, breaks = 5, main = "Distances", xlab = "perpendicular Distance (m)")
hist(x, breaks = 10, main = "Distances", xlab = "perpendicular Distance (m)")
hist(x, breaks = 20, main = "Distances", xlab = "perpendicular Distance (m)")
?setMethod
library(DSsim)
coords <- gaps <- list()
coords[[1]] <- list(data.frame(x = c(0,1000,1000,0,0), y = c(0,0,1000,1000,0)))
gaps[[1]] <- list(data.frame(x = c(400,600,500,350,400), y = c(100,250,300,120,100)))
region <- make.region(region.name = "study.area", units = "m", coords = coords, gaps = gaps)
plot(region)
coords[[1]] <- list(data.frame(x = c(0,1000,1000,0,0), y = c(0,0,1000,1000,0)))
gaps[[1]] <- list(data.frame(x = c(400,600,500,350,400), y = c(100,250,600,120,100)))
region <- make.region(region.name = "study.area", units = "m", coords = coords, gaps = gaps)
plot(region)
?make.region
18/5
load(file.choose())
ls()
BAEAudiograms
plot(BAEAudiograms$Audiogram12$x,BAEAudiograms$Audiogram12$y)
plot(BAEAudiograms$Audiogram12$x,BAEAudiograms$Audiogram12$y, type = "l")
plot(log(BAEAudiograms$Audiogram12$x),BAEAudiograms$Audiogram12$y, type = "l")
Audiogram <- BAEAudiograms$Audiogram12
plot(log(Audiogram$x),Audiogram$y, type = "l")
Audiogram <- BAEAudiograms$Audiogram1
plot(log(Audiogram$x),Audiogram$y, type = "l", col = 1)
Audiogram
Audiogram <- BAEAudiograms$Audiogram12
Audiogram
names(BAEAudiograms)
Audiogram <- BAEAudiograms$Audiogram01
plot(log(Audiogram$x),Audiogram$y, type = "l", col = 1)
Audiogram <- BAEAudiograms$Audiogram02
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 2)
Audiogram <- BAEAudiograms$Audiogram03
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 3, lty = 2)
Audiogram <- BAEAudiograms$Audiogram04
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 4, lty = 3)
Audiogram <- BAEAudiograms$Audiogram05
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 2, lty = 4)
Audiogram <- BAEAudiograms$Audiogram12
lines(log(Audiogram$x),Audiogram$y, type = "l")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
Audiogram <- BAEAudiograms$Audiogram01
plot(log(Audiogram$x),Audiogram$y, type = "l", col = 1, ylim= c(0,160))
Audiogram <- BAEAudiograms$Audiogram02
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 2)
Audiogram <- BAEAudiograms$Audiogram03
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 3, lty = 2)
Audiogram <- BAEAudiograms$Audiogram04
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 4, lty = 3)
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 1, ylim= c(0,160))
Audiogram <- BAEAudiograms$Audiogram01
plot(log(Audiogram$x),Audiogram$y, type = "l", col = 1, ylim= c(0,160))
Audiogram <- BAEAudiograms$Audiogram02
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 2)
Audiogram <- BAEAudiograms$Audiogram03
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 3, lty = 2)
Audiogram <- BAEAudiograms$Audiogram04
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 4, lty = 3)
Audiogram <- BAEAudiograms$Audiogram05
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 2, lty = 4)
Audiogram <- BAEAudiograms$Audiogram06
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 6, lty = 5)
Audiogram <- BAEAudiograms$Audiogram07
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 2)
Audiogram <- BAEAudiograms$Audiogram08
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 5, lty = 2)
Audiogram <- BAEAudiograms$Audiogram09
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 6, lty = 3)
Audiogram <- BAEAudiograms$Audiogram10
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 6, lty = 4)
Audiogram <- BAEAudiograms$Audiogram11
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 5, lty = 4)
Audiogram <- BAEAudiograms$Audiogram12
lines(log(Audiogram$x),Audiogram$y, type = "l")
Audiogram <- BAEAudiograms$Audiogram01
plot(log(Audiogram$x),Audiogram$y, type = "l", col = 1, ylim= c(0,160))
Audiogram <- BAEAudiograms$Audiogram02
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 2)
Audiogram <- BAEAudiograms$Audiogram03
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 3, lty = 2)
Audiogram <- BAEAudiograms$Audiogram04
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 4, lty = 3)
Audiogram <- BAEAudiograms$Audiogram05
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 2, lty = 4)
Audiogram <- BAEAudiograms$Audiogram06
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 6, lty = 5)
Audiogram <- BAEAudiograms$Audiogram07
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 2)
Audiogram <- BAEAudiograms$Audiogram08
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 5, lty = 2)
Audiogram <- BAEAudiograms$Audiogram09
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 6, lty = 3)
Audiogram <- BAEAudiograms$Audiogram10
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 6, lty = 4)
Audiogram <- BAEAudiograms$Audiogram11
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 5, lty = 4)
Audiogram <- BAEAudiograms$Audiogram12
lines(log(Audiogram$x),Audiogram$y, type = "l")
Audiogram <- BAEAudiograms$Audiogram11
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 2, lty = 4)
Audiogram <- BAEAudiograms$Audiogram11
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 2, lty = 1)
Audiogram <- BAEAudiograms$Audiogram01
plot(log(Audiogram$x),Audiogram$y, type = "l", col = 1, ylim= c(0,160))
Audiogram <- BAEAudiograms$Audiogram02
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 2)
Audiogram <- BAEAudiograms$Audiogram03
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 3, lty = 2)
Audiogram <- BAEAudiograms$Audiogram04
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 4, lty = 3)
Audiogram <- BAEAudiograms$Audiogram05
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 2, lty = 4)
Audiogram <- BAEAudiograms$Audiogram06
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 6, lty = 5)
Audiogram <- BAEAudiograms$Audiogram07
Audiogram <- BAEAudiograms$Audiogram06
Audiogram <- BAEAudiograms$Audiogram06
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 8, lty = 1, lwd = 2)
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 7, lty = 1, lwd = 2)
Audiogram <- BAEAudiograms$Audiogram07
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 2)
Audiogram <- BAEAudiograms$Audiogram08
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 5, lty = 2)
Audiogram <- BAEAudiograms$Audiogram09
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 6, lty = 3)
Audiogram <- BAEAudiograms$Audiogram10
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 6, lty = 4)
Audiogram <- BAEAudiograms$Audiogram11
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 2, lty = 1)
Audiogram <- BAEAudiograms$Audiogram12
lines(log(Audiogram$x),Audiogram$y, type = "l")
Audiogram <- BAEAudiograms$Audiogram07
Audiogram
data.frame(x = Audiogram$x, y = Audiogram$y)
class(BAEAudiograms)
WorkingAudiogram<- as.data.frame(BAEAudiograms[[7]])
WorkingAudiogram[,1]<- log10(WorkingAudiogram[,1])
WorkingAudiogram
SonarFreq = 1000
WorkingAudiogram<- as.data.frame(BAEAudiograms[[7]])
WorkingAudiogram[,1]<- log10(WorkingAudiogram[,1])
# evaluate the desired frequency by linear interpolation
approx(WorkingAudiogram, xout=log10(SonarFreq))$y
WorkingAudiogram<- as.data.frame(BAEAudiograms[[5]])
WorkingAudiogram[,1]<- log10(WorkingAudiogram[,1])
# evaluate the desired frequency by linear interpolation
approx(WorkingAudiogram, xout=log10(SonarFreq))$y
WorkingAudiogram<- as.data.frame(BAEAudiograms[[12]])
WorkingAudiogram[,1]<- log10(WorkingAudiogram[,1])
approx(WorkingAudiogram, xout=log10(SonarFreq))$y
WorkingAudiogram<- as.data.frame(BAEAudiograms[[11]])
WorkingAudiogram[,1]<- log10(WorkingAudiogram[,1])
approx(WorkingAudiogram, xout=log10(SonarFreq))$y
load(file.choose())
#load .robj
Audiogram <- BAEAudiograms$Audiogram12
SonarFreq = 1000
WorkingAudiogram<- as.data.frame(BAEAudiograms[[5]])
WorkingAudiogram[,1]<- log10(WorkingAudiogram[,1])
# evaluate the desired frequency by linear interpolation
approx(WorkingAudiogram, xout=log10(SonarFreq))$y
plot(log(Audiogram$x), Audiogram$y, type = "l")
Audiogram <- BAEAudiograms$Audiogram07
lines(log(Audiogram$x), Audiogram$y, type = "l", col=2)
range(Audiogram$y)
Audiogram <- BAEAudiograms$Audiogram12
plot(log(Audiogram$x), Audiogram$y, type = "l", ylim=c(0,135))
Audiogram <- BAEAudiograms$Audiogram07
lines(log(Audiogram$x), Audiogram$y, type = "l", col=2)
Audiogram <- BAEAudiograms$Audiogram12
plot(log(Audiogram$x), Audiogram$y, type = "l", ylim=c(0,135))
Audiogram <- BAEAudiograms$Audiogram07
lines(log(Audiogram$x), Audiogram$y, type = "l", col=1, lty = 2)
Audiogram <- BAEAudiograms$Audiogram11
lines(log(Audiogram$x), Audiogram$y, type = "l", col = 2
Audiogram <- BAEAudiograms$Audiogram05
Audiogram <- BAEAudiograms$Audiogram11
lines(log(Audiogram$x), Audiogram$y, type = "l", col = 2)
Audiogram <- BAEAudiograms$Audiogram05
lines(log(Audiogram$x), Audiogram$y, type = "l", col=2, lty = 2)
Audiogram <- BAEAudiograms$Audiogram07
lines(log(Audiogram$x), Audiogram$y, type = "l", col=2, lty = 2)
Audiogram <- BAEAudiograms$Audiogram06
lines(log(Audiogram$x), Audiogram$y, type = "l", col=2, lty = 2)
Audiogram <- BAEAudiograms$Audiogram12
plot(log(Audiogram$x), Audiogram$y, type = "l", ylim=c(0,135))
Audiogram <- BAEAudiograms$Audiogram07
lines(log(Audiogram$x), Audiogram$y, type = "l", col=1, lty = 2)
Audiogram <- BAEAudiograms$Audiogram11
lines(log(Audiogram$x), Audiogram$y, type = "l", col = 2)
Audiogram <- BAEAudiograms$Audiogram05
lines(log(Audiogram$x), Audiogram$y, type = "l", col=2, lty = 2)
library(mrds)
?ddf.ds
?ddf.ds
?ddf
install.packages("~/DSsim/DSsim_1.0.0.tgz", repos = NULL)
library(DSsim)
?make.simulation
setwd("/Users/laura/Documents/Work/Workshops/Distance 2013/Advanced/DSsim Exercise")
library(DSsim)
library(shapefiles)
region.shapefile <- read.shapefile("Region")
region <- make.region(region.name = "Survey Region", units = "m", shapefile = region.shapefile)
plot(region, plot.units = "km")
load("density.surface.robj")
ls()
head(density.surface[[1]])
pop.density <- make.density(region = region, density.surface = density.surface, x.space = 1000, y.space = 1000)
plot(pop.density, plot.units = "km")
plot(region, add = TRUE)
density <- make.density(region = region, x.space = 1000, y.space = 1000, constant = 0.4e-7)
density <- add.hotspot(density, centre = c(-2500, 2224000), sigma = 10000, amplitude = 0.1e-7)
density <- add.hotspot(density, centre = c(0, 2184000), sigma = 18000, amplitude = -0.5e-8)
plot(density, plot.units = "km")
plot(region, add = TRUE)
pop.description <- make.population.description(region.obj = region, density.obj = pop.density, N = 1500, fixed.N = TRUE)
detect <- make.detectability(key.function = "hn", scale.param = 500, truncation = 1000)
subjective.design <- make.design(transect.type = "Line", design.details = c("user specified"), region = region, plus.sampling = FALSE, path = "/Users/laura/Documents/Work/Workshops/Distance 2013/Advanced/DSsim Exercise/Survey Transects/Subjective Design")
ddf.analyses <- make.ddf.analysis.list(
dsmodel = list(~cds(key = "hn", formula = ~1), #half-normal model
~cds(key = "hr", formula = ~1)),               #hazard rate model
method = "ds", criteria = "AIC")
my.simulation.subjective <- make.simulation(reps = 10, single.transect.set = TRUE, region.obj = region, design.obj = subjective.design, population.description.obj = pop.description, detectability.obj = detect, ddf.analyses.list = ddf.analyses)
#set the display window up for 4 plots
par(mfrow = c(2,2))
#generate and plot and example population
pop <- generate.population(my.simulation.subjective)
plot(region)
plot(pop)
#generate (or rather load from file) the transects
transects <- generate.transects(my.simulation.subjective)
plot(region)
plot(transects, col = 4, lwd = 2)
#simulate the survey process of detection
eg.survey <- simulate.survey(my.simulation.subjective)
plot(eg.survey)
eg.survey <- create.survey.results(my.simulation.subjective)
plot(eg.survey)
#have a look at the distance data from the simulated surey
dist.data <- get.distance.data(eg.survey)
head(dist.data)
hist(dist.data$distance, xlab = "Distance (m)", main = "Distance Data")
my.simulation.subjective  <- run(my.simulation.subjective)
setwd("/Users/laura/DSsim")
#setwd("/Users/laura/Dropbox/DistanceProgramming/Simulation")
library(roxygen2)
roxygenize(package.dir = "DSsim", roclets = c("collate", "namespace", "rd"))
setwd("/Users/laura/DSsim")
#setwd("/Users/laura/Dropbox/DistanceProgramming/Simulation")
library(roxygen2)
roxygenize(package.dir = "DSsim", roclets = c("collate", "namespace", "rd"))
install.packages("~/DSsim/DSsim_1.0.0.tgz", repos = NULL)
setwd("/Users/laura/Documents/Work/Workshops/Distance 2013/Advanced/DSsim Exercise")
library(DSsim)
library(shapefiles)
region.shapefile <- read.shapefile("Region")
region <- make.region(region.name = "Survey Region", units = "m", shapefile = region.shapefile)
plot(region, plot.units = "km")
load("density.surface.robj")
ls()
head(density.surface[[1]])
pop.density <- make.density(region = region, density.surface = density.surface, x.space = 1000, y.space = 1000)
plot(pop.density, plot.units = "km")
plot(region, add = TRUE)
density <- make.density(region = region, x.space = 1000, y.space = 1000, constant = 0.4e-7)
density <- add.hotspot(density, centre = c(-2500, 2224000), sigma = 10000, amplitude = 0.1e-7)
density <- add.hotspot(density, centre = c(0, 2184000), sigma = 18000, amplitude = -0.5e-8)
plot(density, plot.units = "km")
plot(region, add = TRUE)
pop.description <- make.population.description(region.obj = region, density.obj = pop.density, N = 1500, fixed.N = TRUE)
detect <- make.detectability(key.function = "hn", scale.param = 500, truncation = 1000)
subjective.design <- make.design(transect.type = "Line", design.details = c("user specified"), region = region, plus.sampling = FALSE, path = "/Users/laura/Documents/Work/Workshops/Distance 2013/Advanced/DSsim Exercise/Survey Transects/Subjective Design")
ddf.analyses <- make.ddf.analysis.list(
dsmodel = list(~cds(key = "hn", formula = ~1), #half-normal model
~cds(key = "hr", formula = ~1)),               #hazard rate model
method = "ds", criteria = "AIC")
my.simulation.subjective <- make.simulation(reps = 10, single.transect.set = TRUE, region.obj = region, design.obj = subjective.design, population.description.obj = pop.description, detectability.obj = detect, ddf.analyses.list = ddf.analyses)
#set the display window up for 4 plots
par(mfrow = c(2,2))
#generate and plot and example population
pop <- generate.population(my.simulation.subjective)
plot(region)
plot(pop)
#generate (or rather load from file) the transects
transects <- generate.transects(my.simulation.subjective)
plot(region)
plot(transects, col = 4, lwd = 2)
eg.survey <- simulate.survey(my.simulation.subjective)
?simulate.survey
setwd("/Users/laura/DSsim")
#setwd("/Users/laura/Dropbox/DistanceProgramming/Simulation")
library(roxygen2)
roxygenize(package.dir = "DSsim", roclets = c("collate", "namespace", "rd"))
install.packages("~/DSsim/DSsim_1.0.0.tgz", repos = NULL)
library(DSsim)
?simulate.survey
setwd("/Users/laura/DSsim")
#setwd("/Users/laura/Dropbox/DistanceProgramming/Simulation")
library(roxygen2)
roxygenize(package.dir = "DSsim", roclets = c("collate", "namespace", "rd"))
setwd("/Users/laura/DSsim")
#setwd("/Users/laura/Dropbox/DistanceProgramming/Simulation")
library(roxygen2)
roxygenize(package.dir = "DSsim", roclets = c("collate", "namespace", "rd"))
