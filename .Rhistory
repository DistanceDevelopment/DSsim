x<-rnorm(80,0,500)
x<-abs(x)
hist(x)
hist(x)
par(mfrow=c(1,3))
hist(x, breaks = 6)
hist(x, breaks = 10)
hist(x, breaks = 20)
hist(x, breaks = 15)
hist(x, breaks = 20)
hist(x, breaks = 12)
hist(x, breaks = 11)
hist(x, breaks = 10)
x<-c(rep(0,5), rep(100,5), rep(250,5))
hist(x, breaks = 10)
x<-abs(c(rep(0,5), rep(100,5), rep(250,5), rnorm(80,0,500)))
hist(x, breaks = 10)
hist(x, breaks = 20)
hist(x, breaks = 5)
hist(x, breaks = 5, main = "Distances", xlab = "perpendicular Distance (m)")
hist(x, breaks = 10, main = "Distances", xlab = "perpendicular Distance (m)")
hist(x, breaks = 20, main = "Distances", xlab = "perpendicular Distance (m)")
?setMethod
library(DSsim)
coords <- gaps <- list()
coords[[1]] <- list(data.frame(x = c(0,1000,1000,0,0), y = c(0,0,1000,1000,0)))
gaps[[1]] <- list(data.frame(x = c(400,600,500,350,400), y = c(100,250,300,120,100)))
region <- make.region(region.name = "study.area", units = "m", coords = coords, gaps = gaps)
plot(region)
coords[[1]] <- list(data.frame(x = c(0,1000,1000,0,0), y = c(0,0,1000,1000,0)))
gaps[[1]] <- list(data.frame(x = c(400,600,500,350,400), y = c(100,250,600,120,100)))
region <- make.region(region.name = "study.area", units = "m", coords = coords, gaps = gaps)
plot(region)
?make.region
18/5
load(file.choose())
ls()
BAEAudiograms
plot(BAEAudiograms$Audiogram12$x,BAEAudiograms$Audiogram12$y)
plot(BAEAudiograms$Audiogram12$x,BAEAudiograms$Audiogram12$y, type = "l")
plot(log(BAEAudiograms$Audiogram12$x),BAEAudiograms$Audiogram12$y, type = "l")
Audiogram <- BAEAudiograms$Audiogram12
plot(log(Audiogram$x),Audiogram$y, type = "l")
Audiogram <- BAEAudiograms$Audiogram1
plot(log(Audiogram$x),Audiogram$y, type = "l", col = 1)
Audiogram
Audiogram <- BAEAudiograms$Audiogram12
Audiogram
names(BAEAudiograms)
Audiogram <- BAEAudiograms$Audiogram01
plot(log(Audiogram$x),Audiogram$y, type = "l", col = 1)
Audiogram <- BAEAudiograms$Audiogram02
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 2)
Audiogram <- BAEAudiograms$Audiogram03
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 3, lty = 2)
Audiogram <- BAEAudiograms$Audiogram04
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 4, lty = 3)
Audiogram <- BAEAudiograms$Audiogram05
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 2, lty = 4)
Audiogram <- BAEAudiograms$Audiogram12
lines(log(Audiogram$x),Audiogram$y, type = "l")
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
Audiogram <- BAEAudiograms$Audiogram01
plot(log(Audiogram$x),Audiogram$y, type = "l", col = 1, ylim= c(0,160))
Audiogram <- BAEAudiograms$Audiogram02
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 2)
Audiogram <- BAEAudiograms$Audiogram03
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 3, lty = 2)
Audiogram <- BAEAudiograms$Audiogram04
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 4, lty = 3)
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 1, ylim= c(0,160))
Audiogram <- BAEAudiograms$Audiogram01
plot(log(Audiogram$x),Audiogram$y, type = "l", col = 1, ylim= c(0,160))
Audiogram <- BAEAudiograms$Audiogram02
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 2)
Audiogram <- BAEAudiograms$Audiogram03
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 3, lty = 2)
Audiogram <- BAEAudiograms$Audiogram04
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 4, lty = 3)
Audiogram <- BAEAudiograms$Audiogram05
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 2, lty = 4)
Audiogram <- BAEAudiograms$Audiogram06
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 6, lty = 5)
Audiogram <- BAEAudiograms$Audiogram07
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 2)
Audiogram <- BAEAudiograms$Audiogram08
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 5, lty = 2)
Audiogram <- BAEAudiograms$Audiogram09
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 6, lty = 3)
Audiogram <- BAEAudiograms$Audiogram10
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 6, lty = 4)
Audiogram <- BAEAudiograms$Audiogram11
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 5, lty = 4)
Audiogram <- BAEAudiograms$Audiogram12
lines(log(Audiogram$x),Audiogram$y, type = "l")
Audiogram <- BAEAudiograms$Audiogram01
plot(log(Audiogram$x),Audiogram$y, type = "l", col = 1, ylim= c(0,160))
Audiogram <- BAEAudiograms$Audiogram02
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 2)
Audiogram <- BAEAudiograms$Audiogram03
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 3, lty = 2)
Audiogram <- BAEAudiograms$Audiogram04
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 4, lty = 3)
Audiogram <- BAEAudiograms$Audiogram05
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 2, lty = 4)
Audiogram <- BAEAudiograms$Audiogram06
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 6, lty = 5)
Audiogram <- BAEAudiograms$Audiogram07
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 2)
Audiogram <- BAEAudiograms$Audiogram08
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 5, lty = 2)
Audiogram <- BAEAudiograms$Audiogram09
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 6, lty = 3)
Audiogram <- BAEAudiograms$Audiogram10
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 6, lty = 4)
Audiogram <- BAEAudiograms$Audiogram11
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 5, lty = 4)
Audiogram <- BAEAudiograms$Audiogram12
lines(log(Audiogram$x),Audiogram$y, type = "l")
Audiogram <- BAEAudiograms$Audiogram11
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 2, lty = 4)
Audiogram <- BAEAudiograms$Audiogram11
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 2, lty = 1)
Audiogram <- BAEAudiograms$Audiogram01
plot(log(Audiogram$x),Audiogram$y, type = "l", col = 1, ylim= c(0,160))
Audiogram <- BAEAudiograms$Audiogram02
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 2)
Audiogram <- BAEAudiograms$Audiogram03
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 3, lty = 2)
Audiogram <- BAEAudiograms$Audiogram04
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 4, lty = 3)
Audiogram <- BAEAudiograms$Audiogram05
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 2, lty = 4)
Audiogram <- BAEAudiograms$Audiogram06
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 6, lty = 5)
Audiogram <- BAEAudiograms$Audiogram07
Audiogram <- BAEAudiograms$Audiogram06
Audiogram <- BAEAudiograms$Audiogram06
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 8, lty = 1, lwd = 2)
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 7, lty = 1, lwd = 2)
Audiogram <- BAEAudiograms$Audiogram07
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 2)
Audiogram <- BAEAudiograms$Audiogram08
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 5, lty = 2)
Audiogram <- BAEAudiograms$Audiogram09
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 6, lty = 3)
Audiogram <- BAEAudiograms$Audiogram10
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 6, lty = 4)
Audiogram <- BAEAudiograms$Audiogram11
lines(log(Audiogram$x),Audiogram$y, type = "l", col = 2, lty = 1)
Audiogram <- BAEAudiograms$Audiogram12
lines(log(Audiogram$x),Audiogram$y, type = "l")
Audiogram <- BAEAudiograms$Audiogram07
Audiogram
data.frame(x = Audiogram$x, y = Audiogram$y)
class(BAEAudiograms)
WorkingAudiogram<- as.data.frame(BAEAudiograms[[7]])
WorkingAudiogram[,1]<- log10(WorkingAudiogram[,1])
WorkingAudiogram
SonarFreq = 1000
WorkingAudiogram<- as.data.frame(BAEAudiograms[[7]])
WorkingAudiogram[,1]<- log10(WorkingAudiogram[,1])
# evaluate the desired frequency by linear interpolation
approx(WorkingAudiogram, xout=log10(SonarFreq))$y
WorkingAudiogram<- as.data.frame(BAEAudiograms[[5]])
WorkingAudiogram[,1]<- log10(WorkingAudiogram[,1])
# evaluate the desired frequency by linear interpolation
approx(WorkingAudiogram, xout=log10(SonarFreq))$y
WorkingAudiogram<- as.data.frame(BAEAudiograms[[12]])
WorkingAudiogram[,1]<- log10(WorkingAudiogram[,1])
approx(WorkingAudiogram, xout=log10(SonarFreq))$y
WorkingAudiogram<- as.data.frame(BAEAudiograms[[11]])
WorkingAudiogram[,1]<- log10(WorkingAudiogram[,1])
approx(WorkingAudiogram, xout=log10(SonarFreq))$y
load(file.choose())
#load .robj
Audiogram <- BAEAudiograms$Audiogram12
SonarFreq = 1000
WorkingAudiogram<- as.data.frame(BAEAudiograms[[5]])
WorkingAudiogram[,1]<- log10(WorkingAudiogram[,1])
# evaluate the desired frequency by linear interpolation
approx(WorkingAudiogram, xout=log10(SonarFreq))$y
plot(log(Audiogram$x), Audiogram$y, type = "l")
Audiogram <- BAEAudiograms$Audiogram07
lines(log(Audiogram$x), Audiogram$y, type = "l", col=2)
range(Audiogram$y)
Audiogram <- BAEAudiograms$Audiogram12
plot(log(Audiogram$x), Audiogram$y, type = "l", ylim=c(0,135))
Audiogram <- BAEAudiograms$Audiogram07
lines(log(Audiogram$x), Audiogram$y, type = "l", col=2)
Audiogram <- BAEAudiograms$Audiogram12
plot(log(Audiogram$x), Audiogram$y, type = "l", ylim=c(0,135))
Audiogram <- BAEAudiograms$Audiogram07
lines(log(Audiogram$x), Audiogram$y, type = "l", col=1, lty = 2)
Audiogram <- BAEAudiograms$Audiogram11
lines(log(Audiogram$x), Audiogram$y, type = "l", col = 2
Audiogram <- BAEAudiograms$Audiogram05
Audiogram <- BAEAudiograms$Audiogram11
lines(log(Audiogram$x), Audiogram$y, type = "l", col = 2)
Audiogram <- BAEAudiograms$Audiogram05
lines(log(Audiogram$x), Audiogram$y, type = "l", col=2, lty = 2)
Audiogram <- BAEAudiograms$Audiogram07
lines(log(Audiogram$x), Audiogram$y, type = "l", col=2, lty = 2)
Audiogram <- BAEAudiograms$Audiogram06
lines(log(Audiogram$x), Audiogram$y, type = "l", col=2, lty = 2)
Audiogram <- BAEAudiograms$Audiogram12
plot(log(Audiogram$x), Audiogram$y, type = "l", ylim=c(0,135))
Audiogram <- BAEAudiograms$Audiogram07
lines(log(Audiogram$x), Audiogram$y, type = "l", col=1, lty = 2)
Audiogram <- BAEAudiograms$Audiogram11
lines(log(Audiogram$x), Audiogram$y, type = "l", col = 2)
Audiogram <- BAEAudiograms$Audiogram05
lines(log(Audiogram$x), Audiogram$y, type = "l", col=2, lty = 2)
library(mrds)
?ddf.ds
?ddf.ds
?ddf
install.packages("DSsim")
library(DSsim)
?make.simulation
coords <- gaps <- list()
coords[[1]] <- list(data.frame(x = c(0,1000,1000,0,0), y = c(0,0,
1000,1000,0)))
gaps[[1]] <- list(data.frame(x = c(400,600,500,350,400), y = c(100,
250,600,120,100)))
region <- make.region(region.name = "study.area", units = "m",
coords = coords, gaps = gaps)
plot(region)
data(transects.shp)
transects.shp
getwd()
shapefile.pathway <- "/Users/laura/eg"
parallel.design <- make.design(transect.type = "Line",
design.details = c("Parallel","Systematic"), region = region,
design.axis = 0, spacing = 100, plus.sampling =FALSE,
path = shapefile.pathway)
parallel.design
?make.design
write.shapefile(transects.shp, shapefile.pathway)
write.shapefile(transects.shp, paste(shapefile.pathway,"/transects_1")
write.shapefile(transects.shp, paste(shapefile.pathway,"/transects_1"))
paste(shapefile.pathway,"/transects_1")
write.shapefile(transects.shp, paste(shapefile.pathway,"/transects_1", sep = ""))
pop.density <- make.density(region.obj = region, x.space = 10,
y.space = 10, constant = 0.5)
pop.density <- add.hotspot(pop.density, centre = c(50, 200),
sigma = 100, amplitude = 0.1)
pop.density <- add.hotspot(pop.density, centre = c(500, 700),
sigma = 900, amplitude = 0.05)
pop.density <- add.hotspot(pop.density, centre = c(300, 100),
sigma = 100, amplitude = -0.15)
plot(pop.density)
plot(region, add = TRUE)
pop.description <- make.population.description(N = 1000,
density.obj = pop.density, region = region, fixed.N = TRUE)
detect <- make.detectability(key.function = "hn", scale.param = 15,
truncation = 30)
ddf.analyses <- make.ddf.analysis.list(dsmodel = list(~cds(key = "hn",
formula = ~1),~cds(key = "hr", formula = ~1)), method = "ds",
criteria = "AIC")
## Not run:
simulation <- make.simulation(reps = 10, single.transect.set = TRUE,
region.obj = region, design.obj = parallel.design,
population.description.obj = pop.description,
detectability.obj = detect, ddf.analyses.list = ddf.analyses)
survey.results <- create.survey.results(simulation, dht.table = TRUE)
?make.simulation
2:8
100/7
10+11+12+13+14+15+16
10+11+12+13+14+15+17
10+11+12+13+14+16+17
10+11+13+14+16+18+20
10+11+12+14+16+18+20
10+11+12+13+16+18+20
10+11+12+13+15+17+20
10+11+12+13+15+18+21
temp <- NULL
for(i in 1:999){
temp[i] <- sd(sample(2:8, 10, replace = TRUE))
}
hist(temp)
temp2 <- NULL
for(i in 1:999){
temp2[i] <- sd(sample(2:8, 10, replace = TRUE, prob = c(0.1,0.11,0.12,0.13,0.15,0.18,0.21)))
}
hist(temp2)
mean(temp)
mean(temp2)
?summary
test <- list(name = "Laura", age = 32)
class(test) = "person"
summary.person <- function(object){
print("Hello")
}
my.generic.person <- function(object){
print("goodbye")
}
test
test <- list(name = "Laura", age = 32)
test
class(test) = "person"
test
?class
test$name
test <- list(name = "Laura", age = 32)
class(test) = "myperson"
test
summary.mpperson <- function(object){
print("Hello")
}
test(person)
test
summary(test)
summary.myperson <- function(object){
print("Hello")
}
summary(test)
my.generic.myperson <- function(object){
print("goodbye")
}
my.generic.myperson
my.generic.myperson(test)
my.generic(test)
test <- list(name = "Laura", age = 28)
class(test) = "myperson"
summary.myperson <- function(object){
print("Hello")
}
my.generic.myperson <- function(object){
print("goodbye")
}
summary(test)
my.generic(test)
mygeneric.myperson <- function(object){
print("goodbye")
}
summary(test)
my.generic(test)
mygeneric(test)
test <- list(name = "Laura", age = 28)
class(test) = "myperson"
test2 <- list(make= "Peugeot", model = 106)
class(test2) = "mycar"
summary.myperson <- function(object){
print("Hello")
}
mygeneric <- function() UseMethod("mygeneric")
mygeneric.myperson <- function(object){
print("goodbye")
}
mygeneric.mycar <- function(object){
print("vroom vroom")
}
summary(test)
mygeneric(test)
mygeneric <- function(object) UseMethod("mygeneric")
mygeneric.myperson <- function(object){
print("goodbye")
}
mygeneric.mycar <- function(object){
print("vroom vroom")
}
summary(test)
mygeneric(test)
mygeneric(test2)
test <- list(name = "Laura", age = 28)
class(test) = "myperson"
test2 <- list(make= "Peugeot", model = 106)
class(test2) = "mycar"
summary.myperson <- function(object){
print("Hello")
}
mygeneric <- function(object) UseMethod("mygeneric", object)
mygeneric.myperson <- function(object){
print("goodbye")
}
mygeneric.mycar <- function(object){
print("vroom vroom")
}
summary(test)
mygeneric(test)
mygeneric(test2)
setClass(Class = "Test", representation(data = "data.frame"))
setMethod(
f="initialize",
signature="Test",
definition=function(.Object, data){
#Set slots
.Object@data <- data
#Check object is valid
#validObject(.Object)
# return object
return(.Object)
}
)
setGeneric("analyse.data", function(object){standardGeneric ("analyse.data")})
setMethod(
f="analyse.data",
signature="Test",
definition=function(object){
Print("Analysing...")
}
)
setClass(Class = "Test", representation(data = "numeric"))
setClass(Class = "Test", representation(data = "numeric"))
setMethod(
f="initialize",
signature="Test",
definition=function(.Object, data){
#Set slots
.Object@data <- data
#Check object is valid
#validObject(.Object)
# return object
return(.Object)
}
)
setGeneric("analyse.data", function(object){standardGeneric ("analyse.data")})
setMethod(
f="analyse.data",
signature="Test",
definition=function(object){
Print("Analysing...")
}
)
test.data <- new(Class="Test", data = c(1,2,3,4,5))
test.data
analyse.data(test.data)
setMethod(
f="analyse.data",
signature="Test",
definition=function(object){
print("Analysing...")
}
)
test.data <- new(Class="Test", data = c(1,2,3,4,5))
analyse.data(test.data)
setMethod(
f="analyse.data",
signature="Test",
definition=function(x){
print("Analysing...")
}
)
test.data <- new(Class="Test", data = c(1,2,3,4,5))
analyse.data(test.data)
f="initialize",
analyse.data(x=test.data)
analyse.data(object=test.data)
setClass(Class = "Test", representation(data = "numeric"))
setMethod(
f="initialize",
signature="Test",
definition=function(.Object, data){
#Set slots
.Object@data <- data
#Check object is valid
#validObject(.Object)
# return object
return(.Object)
}
)
setwd("/Users/laura/DSsim")
#setwd("/Users/laura/Dropbox/DistanceProgramming/Simulation")
library(roxygen2)
roxygenize(package.dir = "DSsim", roclets = c("rd"))
roxygenize(package.dir = "DSsim", roclets = c("rd"))
setwd("/Users/laura/Example")
#setwd("/Users/laura/Dropbox/DistanceProgramming/Simulation")
library(roxygen2)
roxygenize(package.dir = "Example", roclets = c("rd"))
setwd("/Users/laura/Example")
#setwd("/Users/laura/Dropbox/DistanceProgramming/Simulation")
library(roxygen2)
roxygenize(package.dir = "Example", roclets = c("rd"))
roxygenize(package.dir = "Example", roclets = c("rd"))
roxygenize(package.dir = "Example", roclets = c("rd"))
roxygenize(package.dir = "Example", roclets = c("rd"))
roxygenize(package.dir = "Example", roclets = c("rd"))
roxygenize(package.dir = "Example", roclets = c("rd"))
roxygenize(package.dir = "Example", roclets = c("rd"))
roxygenize(package.dir = "Example", roclets = c("rd"))
setwd("/Users/laura/DSsim")
#setwd("/Users/laura/Dropbox/DistanceProgramming/Simulation")
library(roxygen2)
roxygenize(package.dir = "DSsim", roclets = c("rd"))
library(roxygen2)
roxygenize(package.dir = "DSsim", roclets = c("rd"))
roxygenize(package.dir = "DSsim", roclets = c("rd"))
roxygenize(package.dir = "DSsim", roclets = c("rd"))
roxygenize(package.dir = "DSsim", roclets = c("rd"))
roxygenize(package.dir = "DSsim", roclets = c("rd"))
roxygenize(package.dir = "DSsim", roclets = c("rd"))
