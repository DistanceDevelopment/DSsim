}
return(survey.results)
}
)
#' @rdname run.analysis-methods
#' @export
setMethod(
f="run.analysis",
signature=c("Simulation","Survey.Results"),
definition=function(object, data, dht = FALSE){
#dist.data <- survey.results@ddf.data
best.model <- run.analysis(object, data@ddf.data)
#If dht is true but tables have not been provided
if(dht & nrow(data@region.table@region.table) == 0){
warning("dht tables have not been provided please re-run create.survey.results with dht.tables = TRUE if you would like density/abundance estimates in addition to ddf results.", immediate. = TRUE, call. = FALSE)
dht = FALSE
}
#If ddf has converged and dht it TRUE
if(dht & !is.null(best.model)){
#Calculate density/abundance
dht.results <- dht(best.model, data@region.table@region.table, data@sample.table@sample.table, data@obs.table@obs.table)
return(list(ddf = best.model, dht = dht.results))
}
return(list(ddf = best.model))
}
)
#' @rdname run.analysis-methods
#' @importFrom stats na.omit
#' @export
setMethod(
f="run.analysis",
signature=c("Simulation","DDF.Data"),
definition=function(object, data, dht = FALSE){
ddf.analyses <- object@ddf.analyses
criteria <- NULL
results <- list()
point <- inherits(object@design, "PT.Design")
for(a in seq(along = ddf.analyses)){
results[[a]] <- run.analysis(ddf.analyses[[a]], data, point = point)
if(!is.na(results[[a]][1])){
#Get information to calculate selection criteria
lnl <- results[[a]]$lnl
k <- length(results[[a]]$par)
n <- nrow(results[[a]]$data)
criterion <- object@ddf.analyses[[1]]@criteria
selection.criterion.value <- switch(criterion,
AIC  = 2*k-2*lnl,
aic  = 2*k-2*lnl,
AICc = 2*k-2*lnl+(2*k*(k+1))/(n-k-1),
BIC  = k*log(n)-2*lnl,
bic  = k*log(n)-2*lnl)
criteria <- c(criteria, selection.criterion.value)
}else{
criteria <- c(criteria, NA)
}
}
#check that at least one model worked
no.successful.models <- length(which(!is.na(criteria)))
if(no.successful.models > 0){
best.model.index <- which(criteria == min(na.omit(criteria)))
best.model <- results[[best.model.index]]
best.model$model.index <- best.model.index
#If there is more than one sucessful model find the delta criteria to the
#second best model.
if(no.successful.models > 1){
sorted.criteria <- sort(criteria, na.last = NA)
delta.criteria <- sorted.criteria[2] - sorted.criteria[1]
best.model$delta.criteria <- delta.criteria
}
return(best.model)
}else{
return(NULL)
}
}
)
#' @rdname run-methods
#' @importFrom parallel detectCores makeCluster clusterEvalQ parLapply stopCluster
#' @export
setMethod(
f="run",
signature="Simulation",
definition=function(object, run.parallel = FALSE, max.cores = NA, save.data = FALSE, load.data = FALSE, data.path = character(0)){
#Note options save.data, load.data, data.path are not implemented in simulations run in parallel.
#check the data.path ends in "/"
if(length(data.path) > 0){
temp.path <- strsplit(data.path, split = "")
if(temp.path[length(temp.path)] != "/"){
data.path <- paste(data.path, "/", sep = "")
}
rm(temp.path)
}
#set the transect index to 1
orig.file.index <- object@design@file.index
object@design@file.index <- 1
if(run.parallel & requireNamespace('parallel', quietly = TRUE)){
# counts the number of cores you have
nCores <- getOption("cl.cores", detectCores())
if(!is.na(max.cores)){
nCores <- min(nCores - 1, max.cores)
}
# intitialise the cluster
myCluster <- makeCluster(nCores)
clusterEvalQ(myCluster, {
require(DSsim)
})
results <- parLapply(myCluster, X = as.list(1:object@reps), fun = single.simulation.loop, object = object, save.data = save.data, load.data = load.data, data.path = data.path)
object <- accumulate.PP.results(simulation = object, results = results)
stopCluster(myCluster)
}else{
#Check that it wasn't trying to run parallel
if(run.parallel){
warning("Could not run in parallel, library(parallel) is not installed.")
}
#otherwise loop
for(i in 1:object@reps){
object@results <- single.simulation.loop(i, object, save.data = save.data, load.data = load.data, data.path = data.path)
}
}
object@results <- add.summary.results(object@results)
object@design@file.index <- orig.file.index
return(object)
}
)
library(DSsim)
summary(sim.trunc125.aic.hnhr)
load("C:/Users/kiera/Dropbox/Kieran Studenship/NewResultsJuly/simtrunc125aichnhr.robj")
summary(sim.trunc125.aic.hnhr)
summary(sim, include.glossary=FALSE)
sim.trunc125.aic.hnhr@results$individuals$N
sim.trunc125.aic.hnhr@results$individuals$summary
sim.trunc125.aic.hnhr@results
sim.trunc125.aic.hnhr@results$Detection
sim.trunc125.aic.hnhr@results
sim.trunc125.aic.hnhr@results$individuals
sim.trunc125.aic.hnhr@results$individuals$N
sim.trunc125.aic.hnhr@results$individuals$N[1,,]
sim.trunc125.aic.hnhr@results$individuals$N[1,,1000]
sim.trunc125.aic.hnhr@results$individuals$N[1,4,1000]
sim.trunc125.aic.hnhr@results$individuals$N[1,5,1000]
sim.trunc125.aic.hnhr@results$individuals$N[1,1,1000]
load("C:/Users/kiera/Dropbox/Kieran Studenship/NewResultsJuly/simtrunc125aichnhr.robj")
sim.trunc125.aic.hnhr
load("C:/Users/kiera/Dropbox/Kieran Studenship/NewResultsJuly/simtrunc150AIChnhr.robj")
length(sim.trunc125.aic.hnhr@results$individuals$N[1,1,1:999])
summary(sims[[1]])
summary(sims[[1]])```
??ggplot
install.packages("ggplot2")
data = data.frame(truncation = c(125, 150, 175, 200, 250, 300), estimates = c(sims[[1]]@results$individuals$N[1,1,1:999], sims[[2]]@results$individuals$N[1,1,1:999], sims[[3]]@results$individuals$N[1,1,1:999], sims[[4]]@results$individuals$N[1,1,1:999], sims[[5]]@results$individuals$N[1,1,1:999], sims[[6]]@results$individuals$N[1,1,1:999])
)
?stat_summary
library(DSsim)
library(ggplot2)
data = data.frame(truncation = factor(rep(c(125, 150, 175, 200, 250, 300), each=999)), estimates = c(sims[[1]]@results$individuals$N[1,1,1:999], sims[[2]]@results$individuals$N[1,1,1:999], sims[[3]]@results$individuals$N[1,1,1:999], sims[[4]]@results$individuals$N[1,1,1:999], sims[[5]]@results$individuals$N[1,1,1:999], sims[[6]]@results$individuals$N[1,1,1:999]))
ggplot(data, aes(x = truncation, y = estimates))
+ geom_boxplot()
+ geom_hline(yintercept = 250, linetype="dashed", color = "red", size = 1.2)
+ stat_summary(fun.y = mean, geom="point", size = 2, color = "blue")
extract.trun.dist <- function(simulation){
return(simulation@ddf.analyses[[1]]@truncation)
}
library(DSsim)
load("C:/Users/kiera/Dropbox/Kieran Studenship/NewResultsJuly/simtrunc150AIChnhr.robj")
load("C:/Users/kiera/Dropbox/Kieran Studenship/NewResultsJuly/simtrunc125aichnhr.robj")
load("C:/Users/kiera/Dropbox/Kieran Studenship/NewResultsJuly/simtrunc1775AIChnhr.robj")
sims<-vector("list", length=2)
sims[[1]] <- sim.trunc125.aic.hnhr
sims[[2]] <- sim
extract.trun.dist <- function(simulation){
return(simulation@ddf.analyses[[1]]@truncation)
}
Trunc.Dist = extract.trun.dist(sims)
?lapply
Trunc.dist <- lapply(sims, extract.trun.dist)
library(knitr)
?kable
?switch
extract.info <- function(simulation, info.name){
switch(info.name,
N = simulation@population.description@N,
reps = simulation@reps,
truncation.distance = simulation@ddf.analyses[[1]]@truncation,
n = simulation@results$individuals$summary[1,4,1000],
estimated.abundance = simulation@results$individuals$N[1,1,1000],
mean.se = simulation@results$individuals$N[1,2,1000],
percentage.bias = 100*((simulation@results$individuals$N[1,1,1000] - simulation@population.description@N)/simulation@population.description@N),
RMSE = sqrt(sum((simulation@results$individuals$N[1,1,1:simulation@reps]-simulation@population.description@N)**2)/simulation@reps))
}
?lapply
?paste
?cbind
vignette(package = "Devtools")
vignette(package = "devtools")
vignette("dependencies", package = "devtools")
sims <- data(truncationResults.rda, package = DSsim)
sims <- data(truncationResults.rda, package = "DSsim")
sims <- load(truncationResults.rda, package = DSsim)
?load
library(DSsim)
data()
sims <- load(file = "~/GitHub/DSsim/DSsim/data/truncationResults.rda")
sims[[1]]
sims[2]
sims[1]
sims[1][1]
sims[1][]
sims[1][2]
sims[[1]]
sims[[1]]@reps
?save
sims <- load(file = "~/GitHub/DSsim/DSsim/data/truncationResultsAIC.rda")
sims <- load(file = "~/GitHub/DSsim/DSsim/data/truncationResultsBIC.rda")
load(file = "~/GitHub/DSsim/DSsim/data/truncationResultsBIC.rda")
?load
load(file = "~/GitHub/DSsim/DSsim/data/truncationResultsAIC.rda")
sims
extract.info <- function(simulation, info.name){
switch(info.name,
N = simulation@population.description@N,
reps = simulation@reps,
truncation.distance = simulation@ddf.analyses[[1]]@truncation,
n = simulation@results$individuals$summary[1,4,1000],
estimated.abundance = simulation@results$individuals$N[1,1,1000],
mean.se = simulation@results$individuals$N[1,2,1000],
percentage.bias = 100*((simulation@results$individuals$N[1,1,1000]
- simulation@population.description@N)
/simulation@population.description@N),
RMSE = sqrt(sum((simulation@results$individuals$N[1,1,1:simulation@reps]
- simulation@population.description@N)**2)/simulation@reps))
}
sims[[1]]@ddf.analyses
sims[[1]]@ddf.analyses$CRITERIA
sims[[1]]@ddf.analyses$criteria
sims[[1]]@ddf.analyses[]$criteria
sims[[1]]@ddf.analyses[1]$criteria
sims[[1]]@ddf.analyses
sims[[1]]@ddf.analyses[[1]]$criteria
sims[[1]]@ddf.analyses[[1]]
sims[[1]]@ddf.analyses[[1]]@criteria
extract.info <- function(simulation, info.name){
switch(info.name,
N = simulation@population.description@N,
reps = simulation@reps,
truncation.distance = simulation@ddf.analyses[[1]]@truncation,
n = simulation@results$individuals$summary[1,4,1000],
estimated.abundance = simulation@results$individuals$N[1,1,1000],
mean.se = simulation@results$individuals$N[1,2,1000],
percentage.bias = 100*((simulation@results$individuals$N[1,1,1000]
- simulation@population.description@N)
/simulation@population.description@N),
RMSE = sqrt(sum((simulation@results$individuals$N[1,1,1:simulation@reps]
- simulation@population.description@N)**2)/simulation@reps))
criteria = simulation@ddf.analyses[[1]]@criteria
}
extract.info(sims[[4]], "criteria")
print(extract.info(sims[[4]], "criteria"))
sims[[1]]@ddf.analyses[[1]]
sims[[1]]@ddf.analyses[[2]]
sims.aic<-sims
save(sims.aic, file = "~/GitHub/DSsim/DSsim/data/truncationResultsAIC.rda")
rm(sims)
rm(sims.aic)
load(file = "~/GitHub/DSsim/DSsim/data/truncationResultsAIC.rda")
load(file = "~/GitHub/DSsim/DSsim/data/truncationResultsBIC.rda")
print(extract.info(sims[[4]], "criteria"))
sims.bic<-sims
print(extract.info(sims.bic[[4]], "criteria"))
save(sims.bic, file = "~/GitHub/DSsim/DSsim/data/truncationResultsBIC.rda")
rm()
rm(*)
rm(*.rda)
rm(**)
rm(sims)
rm(sims.aic)
rm(sims.bic)
rm(extract.info())
rm(extract.info
rm(extract.info)
rm(extract.info)
load(file = "~/GitHub/DSsim/DSsim/data/truncationResults.rda")
sims[[1]]@results$individuals[555]
sims[[1]]@results$individuals
sims[[1]]@results$individuals[1,1,555]
sims[[1]]@results$individuals$N[1,1,555]
sims[[1]]@results$individuals$N[1,1,]
library(DSsim)
library(shapefiles)
set.seed(4321)
setwd("~/GitHub/DSsim/DSsim/vignettes")
region.shapefile <- read.shapefile("Study_ar") #DSsim assumes there is a shapefile called this in the R working directory
region <- make.region(region.name = "Survey Region",
units = "m",
shapefile = region.shapefile)
pop.density <- make.density(region = region,
x.space = 1000,
y.space = 1000,
constant = 1)
pop.description <- make.population.description(region.obj = region,
density.obj = pop.density,
N = 250,
fixed.N = TRUE)
sigma = 120
shape = 3
detect <- make.detectability(key.function = "hr",
scale.param = sigma,
shape.param = shape
truncation = 500)
detect <- make.detectability(key.function = "hr",
scale.param = sigma,
shape.param = shape,
truncation = 500)
parallel.design <- make.design(transect.type = "Line",
design.details = c("Parallel","Systematic"),
region.obj = region,
path = "shapefiles")
library(DSsim)
library(shapefiles)
set.seed(4321)
region.shapefile <- read.shapefile("Study_ar") #DSsim assumes there is a shapefile called this in the R working directory
region <- make.region(region.name = "Survey Region",
units = "m",
shapefile = region.shapefile)
pop.density <- make.density(region = region,
x.space = 1000,
y.space = 1000,
constant = 1)
pop.description <- make.population.description(region.obj = region,
density.obj = pop.density,
N = 250,
fixed.N = TRUE)
sigma = 120
shape = 3
detect <- make.detectability(key.function = "hr",
scale.param = sigma,
shape.param = shape,
truncation = 500)
parallel.design <- make.design(transect.type = "Line",
design.details = c("Parallel","Systematic"),
region.obj = region,
path = "shapefiles")
ddf.analyses.aic <- make.ddf.analysis.list(dsmodel = list(~cds(key = "hn", formula = ~1), ~cds(key = "hr", formula = ~1)),
method = "ds",
criteria = "AIC",
truncation = 125)
simtrunc125 <- make.simulation(reps = 999,
single.transect.set = FALSE,
region.obj = region,
design.obj = parallel.design,
population.description.obj = pop.description,
detectability.obj = detect,
ddf.analyses.list = ddf.analyses.aic)
set.seed(4321)
simtrunc125 <- run(simtrunc125)
Trun.dists <- c(1.25*sigma, 1.5*sigma, 1.75*sigma, 2*sigma, 2.5*sigma, 3*sigma)
sims <- vector("list", length(Trun.dists))
sims[[1]]<-simtrunc125
for(i in 2:6){
set.seed(4321)
ddf.analyses.aic <- make.ddf.analysis.list(dsmodel = list(~cds(key = "hn", formula = ~1), ~cds(key = "hr", formula = ~1)),
method = "ds",
criteria = "AIC",
truncation = Trun.dists[[i]])
sim <- make.simulation(reps = 999,
single.transect.set = FALSE,
region.obj = region,
design.obj = parallel.design,
population.description.obj = pop.description,
detectability.obj = detect,
ddf.analyses.list = ddf.analyses.aic)
sim  <- run(sim)
sims[[i]]<-sim
}
save(sims, file = "~/GitHub/DSsim/DSsim/data/truncationResultsAIChrkey.rda")
ddf.analyses.bic <- make.ddf.analysis.list(dsmodel = list(~cds(key = "hn", formula = ~1), ~cds(key = "hr", formula = ~1)),
method = "ds",
criteria = "BIC",
truncation = 125)
simtrunc125 <- make.simulation(reps = 999,
single.transect.set = FALSE,
region.obj = region,
design.obj = parallel.design,
population.description.obj = pop.description,
detectability.obj = detect,
ddf.analyses.list = ddf.analyses.bic)
set.seed(4321)
simtrunc125 <- run(simtrunc125)
Trun.dists <- c(1.25*sigma, 1.5*sigma, 1.75*sigma, 2*sigma, 2.5*sigma, 3*sigma)
sims <- vector("list", length(Trun.dists))
sims[[1]]<-simtrunc125
for(i in 2:6){
set.seed(4321)
ddf.analyses.aic <- make.ddf.analysis.list(dsmodel = list(~cds(key = "hn", formula = ~1), ~cds(key = "hr", formula = ~1)),
method = "ds",
criteria = "BIC",
truncation = Trun.dists[[i]])
sim <- make.simulation(reps = 999,
single.transect.set = FALSE,
region.obj = region,
design.obj = parallel.design,
population.description.obj = pop.description,
detectability.obj = detect,
ddf.analyses.list = ddf.analyses.bic)
sim  <- run(sim)
sims[[i]]<-sim
}
save(sims, file = "~/GitHub/DSsim/DSsim/data/truncationResultsBIChrkey.rda")
load( file = "~/GitHub/DSsim/DSsim/data/truncationResultsBIChrkey.rda")
sims[[1]]@ddf.analyses[[1]]@criteria
sims[[1]]@detectability@key.function
sims.hr.aic <- sims
rm(sims)
load( file = "~/GitHub/DSsim/DSsim/data/truncationResultsAIChrkey.rda")
sims[[1]]@ddf.analyses[[1]]@criteria
sims[[1]]@detectability@key.function
sims.hr.aic <- sims
rm(sims)
load( file = "~/GitHub/DSsim/DSsim/data/truncationResultsBIChrkey.rda")
sims.hr.bic <- sims
save(sims.hr.aic,  file = "~/GitHub/DSsim/DSsim/data/truncationResultsAIChrkey.rda")
save(sims.hr.bic,  file = "~/GitHub/DSsim/DSsim/data/truncationResultsBIChrkey.rda")
rm(sims.hr.bic)
data("~/GitHub/DSsim/DSsim/data/truncationResultsBIChrkey.rda")
getwd()
setwd(~/GitHub/DSsim/DSsim/data/)
setwd("~/GitHub/DSsim/DSsim/data/")
data("truncationResultsBIChrkey.rda")
setwd("~/GitHub/DSsim/DSsim/data/")
setwd("~/GitHub/DSsim/DSsim/")
data("truncationResultsBIChrkey.rda")
summary(sims.hr.aic)
summary(sims.hr.aic[[1]])
summary(sims.hr.aic[[2]])
summary(sims.hr.aic[[3]])
summary(sims.hr.aic[[4]])
summary(sims.hr.aic[[5]])
summary(sims.hr.aic[[6]])
load(file = "~/GitHub/DSsim/DSsim/data/truncationResultsBIChrkey.rda")
summary(sims.hr.bic[[6]])
summary(sims.hr.bic[[5]])
summary(sims.hr.bic[[6]])
summary(sims.hr.bic[[3]])
summary(sims.hr.bic[[1]])
Trun.dists <- c(1.25*sigma, 1.5*sigma, 1.75*sigma, 2*sigma, 2.5*sigma, 3*sigma)
sims.hr.bic <- vector("list", length(Trun.dists))
sims.hr.bic[[1]]<-simtrunc125
for(i in 2:6){
set.seed(4321)
ddf.analyses.bic <- make.ddf.analysis.list(dsmodel = list(~cds(key = "hn", formula = ~1), ~cds(key = "hr", formula = ~1)),
method = "ds",
criteria = "BIC",
truncation = Trun.dists[[i]])
sim <- make.simulation(reps = 999,
single.transect.set = FALSE,
region.obj = region,
design.obj = parallel.design,
population.description.obj = pop.description,
detectability.obj = detect,
ddf.analyses.list = ddf.analyses.bic)
sim  <- run(sim)
sims.hr.bic[[i]]<-sim
}
save(sims, file = "~/GitHub/DSsim/DSsim/data/truncationResultsBIChrkey.rda")
setwd("~/GitHub/DSsim/DSsim/vignettes")
Trun.dists <- c(1.25*sigma, 1.5*sigma, 1.75*sigma, 2*sigma, 2.5*sigma, 3*sigma)
sims.hr.bic <- vector("list", length(Trun.dists))
sims.hr.bic[[1]]<-simtrunc125
for(i in 2:6){
set.seed(4321)
ddf.analyses.bic <- make.ddf.analysis.list(dsmodel = list(~cds(key = "hn", formula = ~1), ~cds(key = "hr", formula = ~1)),
method = "ds",
criteria = "BIC",
truncation = Trun.dists[[i]])
sim <- make.simulation(reps = 999,
single.transect.set = FALSE,
region.obj = region,
design.obj = parallel.design,
population.description.obj = pop.description,
detectability.obj = detect,
ddf.analyses.list = ddf.analyses.bic)
sim  <- run(sim)
sims.hr.bic[[i]]<-sim
}
save(sims, file = "~/GitHub/DSsim/DSsim/data/truncationResultsBIChrkey.rda")
load(file = "~/GitHub/DSsim/DSsim/data/truncationResultsAIC.rda")
load(file = "~/GitHub/DSsim/DSsim/data/truncationResultsBIC.rda")
load(file = "~/GitHub/DSsim/DSsim/data/truncationResultsBIChrkey.rda")
load(file = "~/GitHub/DSsim/DSsim/data/truncationResults.rda")
load(file = "~/GitHub/DSsim/DSsim/data/truncationResultsAIC.rda")
load(file = "~/GitHub/DSsim/DSsim/data/truncationResultsBIC.rda")
load(file = "~/GitHub/DSsim/DSsim/data/truncationResultsAIChrkey.rda")
load(file = "~/GitHub/DSsim/DSsim/data/truncationResultsBIChrkey.rda")
load(file = "~/GitHub/DSsim/DSsim/data/truncationResults.rda")
load(file = "~/GitHub/DSsim/DSsim/data/truncationResultsAIC.rda")
load(file = "~/GitHub/DSsim/DSsim/data/truncationResultsBIC.rda")
load(file = "~/GitHub/DSsim/DSsim/data/truncationResultsAIChrkey.rda")
load(file = "~/GitHub/DSsim/DSsim/data/truncationResultsBIChrkey.rda")
load(file = "~/GitHub/DSsim/DSsim/data/truncationResults.rda")
load(file = "~/GitHub/DSsim/DSsim/data/truncationResultsAIC.rda")
load(file = "~/GitHub/DSsim/DSsim/data/truncationResultsBIC.rda")
load(file = "~/GitHub/DSsim/DSsim/data/truncationResultsAIChrkey.rda")
load(file = "~/GitHub/DSsim/DSsim/data/truncationResultsBIChrkey.rda")
load(file = "~/GitHub/DSsim/DSsim/data/truncationResults.rda")
load(file = "~/GitHub/DSsim/DSsim/data/truncationResultsAIC.rda")
load(file = "~/GitHub/DSsim/DSsim/data/truncationResultsBIC.rda")
load(file = "~/GitHub/DSsim/DSsim/data/truncationResultsAIChrkey.rda")
load(file = "~/GitHub/DSsim/DSsim/data/truncationResultsBIChrkey.rda")
load(file = "~/GitHub/DSsim/DSsim/data/truncationResultsBIChrkey.rda")
load(file = "~/GitHub/DSsim/DSsim/data/truncationResultsBIChrkey.rda")
sims.hr.bic<-sims
save(sims.hr.bic, file = "~/GitHub/DSsim/DSsim/data/truncationResultsBIChrkey.rda")
sims.hr.bic[[1]]@ddf.analyses[[1]]@truncation
sims.hr.bic[[2]]@ddf.analyses[[1]]@truncation
